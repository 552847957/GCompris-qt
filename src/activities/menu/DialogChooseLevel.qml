/* GCompris - DialogChooseLevel.qml
 *
 * Copyright (C) 2018 Johnny Jazeix <jazeix@gmail.com>
 *
 * Authors:
 *   Johnny Jazeix <jazeix@gmail.com>
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, see <http://www.gnu.org/licenses/>.
 */
import QtQuick 2.6
import QtQuick.Controls 1.5
import GCompris 1.0
import "../../core"

/**
 * A QML component for a full screen configuration dialog.
 * @ingroup components
 *
 * All user editable settings are presented to the user in a
 * DialogActivityConfig dialog. The global configuration can be accessed
 * through the Bar in the main menu, activity specific configuration from the
 * respective activity.
 *
 * All config items that are shown in this dialog are persisted
 * using ApplicationSettings.
 *
 * For an example have a look at Menu.qml.
 *
 * For more details on how to add configuration to an activity cf.
 * [the wiki](http://gcompris.net/wiki/Qt_Quick_development_process#Adding_a_configuration_for_a_specific_activity)
 *
 * @sa ApplicationSettings
 * @inherit QtQuick.Item
 */
Rectangle {
    id: dialogChooseLevel
    visible: false

    /* Public interface: */

    /**
     * type:string
     * The name of the activity in case of per-activity config.
     *
     * Will be autogenerated unless set by the caller.
     */
    property string activityName

    /// @cond INTERNAL_DOCS

    property bool isDialog: true

    /**
     * type:string
     * Title of the configuration dialog.
    */
    readonly property string title: currentActivity ? qsTr("%1 levels").arg(currentActivity.title) : ""

    property var difficultiesModel: []
    property QtObject currentActivity

    property string chosenLevel

    /// @endcond

    /**
     * Emitted when the config dialog has been closed.
     */
    signal close

    /**
     * Emitted when the config dialog has been started.
     */
    signal start

    signal stop

    color: "#696da3"
    border.color: "black"
    border.width: 1

    onCurrentActivityChanged: initialize()

    function initialize() {
        activityName = currentActivity.name.split('/')[0]
        difficultiesModel = []
        for(var level in currentActivity.levels) {
            objectiveLoader.dataFiles.push({"level": currentActivity.levels[level], "file": "qrc:/gcompris/src/activities/"+activityName+"/resource/"+currentActivity.levels[level]+"/Data.qml"})
        }
        objectiveLoader.start()
    }

    Loader {
        id: objectiveLoader
        property var dataFiles: []
        property var currentFile
        signal start
        signal stop

        onStart: {
            var file = dataFiles.shift()
            currentFile = file
            source = file.file.toString()
        }
        onLoaded: {
            difficultiesModel.push({"level": currentFile.level, "objective": item.objective})
            if(dataFiles.length != 0) {
                start()
            }
            else {
                stop()
            }
        }
        onStop: {
            difficultiesRepeater.model = difficultiesModel
        }
    }

    Row {
        visible: true
        spacing: 2
        Item { width: 10; height: 1 }

        Column {
            spacing: 10
            anchors.top: parent.top
            Item { width: 1; height: 10 }
            Rectangle {
                color: "#e6e6e6"
                radius: 6.0
                width: dialogChooseLevel.width - 30
                height: title.height * 1.2
                border.color: "black"
                border.width: 2

                Row {
                    spacing: 2
                    padding: 8
                    Image {
                        id: titleIcon
                        anchors {
                            left: parent.left
                            top: parent.top
                            margins: 4 * ApplicationInfo.ratio
                        }
                    }

                    GCText {
                        id: title
                        text: dialogChooseLevel.title
                        width: dialogChooseLevel.width - (30 + cancel.width)
                        horizontalAlignment: Text.AlignHCenter
                        verticalAlignment: Text.AlignVCenter
                        color: "black"
                        fontSize: 20
                        font.weight: Font.DemiBold
                        wrapMode: Text.WordWrap
                    }
                }
            }

            Rectangle {
                color: "#e6e6e6"
                radius: 6.0
                width: dialogChooseLevel.width - 30
                height: dialogChooseLevel.height - (30 + title.height * 1.2)
                border.color: "black"
                border.width: 2
                anchors.margins: 100

                Flickable {
                    id: flick
                    anchors.margins: 8
                    anchors.fill: parent
                    flickableDirection: Flickable.VerticalFlick
                    clip: true
                    contentHeight: contentItem.childrenRect.height + 40 * ApplicationInfo.ratio
                    ExclusiveGroup {
                        id: levelsGroup
                    }
                    Column {
                        Repeater {
                            id: difficultiesRepeater
                            delegate: GCDialogCheckBox {
                                id: objective
                                width: dialogChooseLevel.width
                                text: modelData.objective
                                exclusiveGroup: levelsGroup
                                checked: chosenLevel == modelData.level
                                onClicked: chosenLevel = modelData.level
                            }
                        }
                    }
                }

                // The scroll buttons
                GCButtonScroll {
                    anchors.right: parent.right
                    anchors.rightMargin: 5 * ApplicationInfo.ratio
                    anchors.bottom: flick.bottom
                    anchors.bottomMargin: 5 * ApplicationInfo.ratio
                    onUp: flick.flick(0, 1400)
                    onDown: flick.flick(0, -1400)
                    upVisible: flick.visibleArea.yPosition <= 0 ? false : true
                    downVisible: flick.visibleArea.yPosition + flick.visibleArea.heightRatio >= 1 ? false : true
                }
            }

            Item { width: 1; height: 10 }
        }
    }

    // The cancel button
    GCButtonCancel {
        id: cancel
        onClose: {
            parent.close()
        }
    }
}
